buildscript {
    ext {
        micronautVersion = "1.2.3"
        confluentVersion = "5.2.+"
        kafkaVersion = "2.2.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        // kafkahq
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0"
    }
}

plugins {
    // micronaut
id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.gorylenko.gradle-git-properties" version "2.0.0"

    // kafkahq
    id "com.moowork.node" version "1.3.1"
    id 'io.franzbecker.gradle-lombok' version '3.2.0'
    id 'com.adarshr.test-logger' version '1.7.0'
    id 'com.github.psxpaul.execfork' version '0.1.11'
    id "com.github.ben-manes.versions" version "0.21.0"
}

apply plugin: "com.commercehub.gradle.plugin.avro"

group "org.kafkahq"
version "0.1"
mainClassName = "org.kafkahq.App"
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jcenter.bintray.com" }
}

lombok {
    version = '1.18.10'
    sha256 = ""
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

configurations.all {
    exclude  group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-core'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-api'
}


/**********************************************************************************************************************\
 * Micronaut
 **********************************************************************************************************************/
dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

configurations {
    developmentOnly
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Dmicronaut.environments=dev',
        '-Dmicronaut.io.watch.restart=true'
)

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(run) || graph.hasTask(testClasses)) {
        webpack.enabled = false
        npmInstall.enabled = false
    }
}

/**********************************************************************************************************************\
 * Dependencies
 **********************************************************************************************************************/
dependencies {
    // micronaut
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut:micronaut-security"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile 'io.micronaut:micronaut-views'
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime 'org.freemarker:freemarker:2.3.28'
    compile "io.micronaut:micronaut-security"
    compile "io.micronaut:micronaut-security-session"
    compile "io.micronaut:micronaut-management"
    compile 'io.micronaut.configuration:micronaut-micrometer-registry-prometheus'
    compile 'io.github.mweirauch:micrometer-jvm-extras:0.1.4'

    // kafka
    compile group: "org.apache.kafka", name: "kafka-clients", version: kafkaVersion
    compile group: "io.confluent", name: "kafka-schema-registry-client", version: confluentVersion
    compile group: "io.confluent", name: "kafka-avro-serializer", version: confluentVersion
    compile group: 'org.apache.avro', name: 'avro', version: '1.9.0'
    compile group: 'org.sourcelab', name: 'kafka-connect-client', version: '2.0.+'

    // log
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.8.+'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.8.+'

    // utils
    compileOnly group: "org.projectlombok", name: "lombok", version: "1.18.+"
    compile group: 'org.codehaus.httpcache4j.uribuilder', name: 'uribuilder', version: '2.0.0'
    compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
    compile group: "com.google.code.gson", name: "gson", version: "2.8.+"

    // micronaut test
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.mockito:mockito-junit-jupiter:3.1.0"

    // test
    testCompile "com.salesforce.kafka.test:kafka-junit5:3.1.1"
    testCompile "org.apache.kafka:kafka_2.12:" + kafkaVersion
    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion
    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion + ":tests"
    testCompile "org.apache.kafka:connect-runtime:" + kafkaVersion
    testCompile "org.apache.kafka:connect-file:" + kafkaVersion

    testCompile group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaVersion
    testCompile group: "io.confluent", name: "kafka-streams-avro-serde", version: confluentVersion
    testCompile "io.confluent:kafka-connect-avro-converter:" + confluentVersion
    testCompile group: 'commons-codec', name: 'commons-codec', version: '1.12'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 2000
    showStandardStreams true
}

task testKafkaCluster(type:JavaExec) {
    group = 'verification'
    description = 'Start a standalone test Kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.kafkahq.KafkaTestCluster"
}

task testInjectData(type:JavaExec) {
    group = 'verification'
    description = 'Inject data in a existing kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.kafkahq.KafkaTestCluster"
    args 'inject'
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(test) || graph.hasTask(testKafkaCluster) || graph.hasTask(testInjectData)) {
        webpack.enabled = false
        npmInstall.enabled = false
    }
}

test.dependsOn "startTestKafkaCluster"

task startTestKafkaCluster(type: com.github.psxpaul.task.JavaExecFork, dependsOn: 'testClasses') {
    group = 'verification'
    description = 'Start a global standalone test Kafka cluster during tests'
    classpath = sourceSets.test.runtimeClasspath
    main = 'org.kafkahq.KafkaTestCluster'
    waitForOutput = 'Test data injected sleep done'
    timeout = 300
}

/**********************************************************************************************************************\
 * Node + Webpack
 **********************************************************************************************************************/
import com.moowork.gradle.node.task.NodeTask

task webpack(type: NodeTask, dependsOn: "npmInstall") {
    group = 'build'
    description = 'Build with webpack assets'
    script = project.file("node_modules/.bin/webpack")
    outputs.dir("src/main/resources/static")
    args = ["-p", "--mode production"]
}

jar.dependsOn "webpack"
processResources.dependsOn 'webpack'

clean.delete << file("src/main/resources/static")

/**********************************************************************************************************************\
 * Jar
 **********************************************************************************************************************/
shadowJar {
    mergeServiceFiles()
}

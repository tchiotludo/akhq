buildscript {
    ext {
        joobyVersion = "1.5.+"
        confluentVersion = "5.1.0"
        kafkaVersion = "2.1.+"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.jooby:jooby-gradle-plugin:$joobyVersion"
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.16.0"
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'com.adarshr.test-logger' version '1.6.0'
    id 'com.github.psxpaul.execfork' version '0.1.9'
}

apply plugin: "io.spring.dependency-management"
apply plugin: "com.google.osdetector"
apply plugin: "application"
apply plugin: "jooby"
apply plugin: "idea"
apply plugin: "com.commercehub.gradle.plugin.avro"

group "org.kafkahq"
version "0.1"
mainClassName = "org.kafkahq.App"
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

lombok {
    version = '1.18.4'
    sha256 = ""
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

configurations {
    implementation {
        exclude  group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude  group: 'log4j', module: 'log4j'
    }
}

/**********************************************************************************************************************\
 * Jooby
 **********************************************************************************************************************/

dependencyManagement {
    imports {
        mavenBom "org.jooby:jooby-bom:$joobyVersion"
    }
}

joobyRun {
    includes = ["**/*.class", "**/*.conf", "**/*.properties", "**/*.ftl", "**/*.xml"]
}

sourceSets.main.resources {
    srcDirs = ["conf", "public"]
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(joobyRun)) {
        webpack.enabled = false
        npmInstall.enabled = false
    }
}

/**********************************************************************************************************************\
 * Dependencies
 **********************************************************************************************************************/
dependencies {
    // jooby
    compile "org.jooby:jooby-netty"
    compile "io.netty:netty-transport-native-epoll:${dependencyManagement.importedProperties["netty.version"]}:${osdetector.classifier.contains("linux") ? "linux-x86_64" : ""}"
    compile "io.netty:netty-tcnative-boringssl-static:${dependencyManagement.importedProperties["boringssl.version"]}"
    compile group: "org.jooby", name: "jooby-assets", version: joobyVersion
    compile group: "org.jooby", name: "jooby-livereload", version: joobyVersion
    compile group: "org.jooby", name: "jooby-jackson", version: joobyVersion
    compile group: "org.jooby", name: "jooby-ftl", version: joobyVersion
    compile group: "org.jooby", name: "jooby-whoops", version: joobyVersion

    // kafka
    compile group: "org.apache.kafka", name: "kafka-clients", version: kafkaVersion
    compile group: "io.confluent", name: "kafka-schema-registry-client", version: confluentVersion
    compile group: "io.confluent", name: "kafka-avro-serializer", version: confluentVersion
    compile group: 'org.apache.avro', name: 'avro', version: '1.8.2'

    // utils
    compile group: 'org.codehaus.httpcache4j.uribuilder', name: 'uribuilder', version: '2.0.0'
    compile group: 'com.google.guava', name: 'guava', version: '26.0-jre'

    // debug
    compile group: "com.google.code.gson", name: "gson", version: "2.8.+"
    compileOnly group: "org.projectlombok", name: "lombok", version: "1.18.+"

    // test
    testCompile "junit:junit:4.12"
    testCompile "com.salesforce.kafka.test:kafka-junit4:3.1.0"
    testCompile "org.apache.kafka:kafka_2.12:" + kafkaVersion
    testCompile "io.rest-assured:rest-assured:3.1.0"
    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion
    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion + ":tests"
    testCompile group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaVersion
    testCompile group: "io.confluent", name: "kafka-streams-avro-serde", version: confluentVersion
    testCompile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    testLogging {
        exceptionFormat = 'full'
    }
}

testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 2000
    showStandardStreams true
}

task testKafkaCluster(type:JavaExec) {
    group = 'verification'
    description = 'Start a standalone test Kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.kafkahq.KafkaTestCluster"
}

task testInjectData(type:JavaExec) {
    group = 'verification'
    description = 'Start a standalone test Kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.kafkahq.KafkaTestCluster"
    args ['inject']
}


gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(test) || graph.hasTask(testKafkaCluster) || graph.hasTask(testInjectData)) {
        webpack.enabled = false
        npmInstall.enabled = false
    }
}

test.dependsOn "startTestKafkaCluster"

task startTestKafkaCluster(type: com.github.psxpaul.task.JavaExecFork, dependsOn: 'testClasses') {
    group = 'verification'
    description = 'Start a global standalone test Kafka cluster during tests'
    classpath = sourceSets.test.runtimeClasspath
    main = 'org.kafkahq.KafkaTestCluster'
    args ['1']
    waitForOutput = 'Test data injected'
    timeout = 300
}

/**********************************************************************************************************************\
 * Node + Webpack
 **********************************************************************************************************************/
import com.moowork.gradle.node.task.NodeTask

task webpack(type: NodeTask, dependsOn: "npmInstall") {
    group = 'build'
    description = 'Build with webpack assets'
    script = project.file("node_modules/.bin/webpack")
    outputs.dir("public/static")
    args = ["-p", "--mode production"]
}

jar.dependsOn "webpack"
processResources.dependsOn 'webpack'

clean.delete << file("public/static")

/**********************************************************************************************************************\
 * Jar
 **********************************************************************************************************************/
jar {
    manifest {
        attributes "Main-Class": mainClassName
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
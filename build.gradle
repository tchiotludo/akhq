buildscript {
    ext {
        micronautVersion = "1.3.4"
        confluentVersion = "5.4.+"
        kafkaVersion = "2.4.1"
        lombokVersion = "1.18.12"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        // akhq
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.19.1"
    }
}

plugins {
    // micronaut
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.gorylenko.gradle-git-properties" version "2.2.2"

    // akhq
    id 'com.adarshr.test-logger' version '2.0.0'
    id 'org.gradle.test-retry' version '1.1.4'
    id 'com.github.psxpaul.execfork' version '0.1.13'
    id "com.github.ben-manes.versions" version "0.28.0"
}

apply plugin: "com.commercehub.gradle.plugin.avro"

group "org.akhq"
version "0.1"
mainClassName = "org.akhq.App"
sourceCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jcenter.bintray.com" }
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

configurations.all {
    exclude  group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-core'
    exclude  group: 'org.apache.logging.log4j', module: 'log4j-api'
}


/**********************************************************************************************************************\
 * Micronaut
 **********************************************************************************************************************/
dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

configurations {
    developmentOnly
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Dmicronaut.environments=dev',
        '-Dmicronaut.io.watch.restart=true'
)

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

/**********************************************************************************************************************\
 * Dependencies
 **********************************************************************************************************************/
dependencies {
    // lombok
    annotationProcessor "org.projectlombok:lombok:" + lombokVersion
    compileOnly 'org.projectlombok:lombok:' + lombokVersion

    // micronaut
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut:micronaut-security"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi:1.4.3"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.swagger.core.v3:swagger-annotations"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    compile "io.micronaut:micronaut-security"
    compile "io.micronaut:micronaut-security-session"
    compile "io.micronaut:micronaut-management"
    compile 'io.micronaut.configuration:micronaut-micrometer-registry-prometheus'
    compile "io.micronaut.configuration:micronaut-security-ldap"

    // kafka
    compile group: "org.apache.kafka", name: "kafka-clients", version: kafkaVersion
    compile group: "io.confluent", name: "kafka-schema-registry-client", version: confluentVersion
    compile group: "io.confluent", name: "kafka-avro-serializer", version: confluentVersion
    compile group: 'org.apache.avro', name: 'avro', version: '1.9.2'
    compile group: 'org.sourcelab', name: 'kafka-connect-client', version: '3.0.0'

    // log
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.8.+'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.8.+'

    // utils
    compile group: 'org.codehaus.httpcache4j.uribuilder', name: 'uribuilder', version: '2.0.0'
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    compile group: "com.google.code.gson", name: "gson", version: "2.8.+"

    // api
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.10.0'

    // client
    compile project(":client")

    // micronaut test
    testAnnotationProcessor "org.projectlombok:lombok:" + lombokVersion
    testCompileOnly 'org.projectlombok:lombok:' + lombokVersion

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.mockito:mockito-junit-jupiter:3.3.3"

    // test
    testCompile "com.salesforce.kafka.test:kafka-junit5:3.2.1"
    testCompile "org.apache.kafka:kafka_2.12:" + kafkaVersion
    // force jackson version compatible with kafka
    testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.0'
    testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.0'
    testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0'

    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion
    testCompile "io.confluent:kafka-schema-registry:" + confluentVersion + ":tests"
    testCompile "org.apache.kafka:connect-runtime:" + kafkaVersion
    testCompile "org.apache.kafka:connect-file:" + kafkaVersion

    testCompile group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaVersion
    testCompile group: "io.confluent", name: "kafka-streams-avro-serde", version: confluentVersion
    testCompile "io.confluent:kafka-connect-avro-converter:" + confluentVersion
    testCompile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    testCompile group: 'org.codehaus.jackson', name: 'jackson-mapper-lgpl', version: '1.9.3'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }

    retry {
        maxRetries = 5
        maxFailures = 15
    }
}

testlogger {
    theme 'mocha'
    showExceptions true
    showFullStackTraces true
    showCauses true
    slowThreshold 2000
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams true
}

task testKafkaCluster(type:JavaExec) {
    group = 'verification'
    description = 'Start a standalone test Kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.akhq.KafkaTestCluster"
}

task testInjectData(type:JavaExec) {
    group = 'verification'
    description = 'Inject data in a existing kafka cluster'
    classpath sourceSets.test.runtimeClasspath
    main = "org.akhq.KafkaTestCluster"
    args 'inject'
}

test.dependsOn "startTestKafkaCluster"

task startTestKafkaCluster(type: com.github.psxpaul.task.JavaExecFork, dependsOn: 'testClasses') {
    group = 'verification'
    description = 'Start a global standalone test Kafka cluster during tests'
    classpath = sourceSets.test.runtimeClasspath
    main = 'org.akhq.KafkaTestCluster'
    waitForOutput = 'Test data injected sleep done'
    timeout = 300
}

/**********************************************************************************************************************\
 * Jar
 **********************************************************************************************************************/
shadowJar {
    mergeServiceFiles()
}

processResources.dependsOn ":client:installFrontend"
processResources.dependsOn ":client:assembleFrontend"
processResources.dependsOn ":client:copyClientResources"


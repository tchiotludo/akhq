micronaut:
  application:
    name: akhq
  io:
    watch:
      paths: src/main
      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true
  server:
    thread-selection: AUTO
    max-request-size: 10MB
    read-idle-timeout: 10m
    write-idle-timeout: 10m
    idle-timeout: 10m
    netty:
      max-chunk-size: 10MB
  router:
    static-resources:
      react:
        paths: classpath:ui
        mapping: "/ui/**"
      static:
        paths: classpath:static
        mapping: "/static/**"
      swagger:
        paths: classpath:META-INF/swagger
        mapping: "/swagger/**"
  security:
    enabled: false
    authentication: cookie
    endpoints:
      login:
        path: "/login"
      logout:
        path: "/logout"
        get-allowed: true
    token:
      jwt:
        enabled: true
        cookie:
          enabled: true
          cookie-same-site: strict
        signatures:
          secret:
            generator:
              secret: "pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!"

    redirect:
      login-success: "${micronaut.server.context-path:}/ui"
      forbidden:
        url: "${micronaut.server.context-path:}/ui/login/forbidden"
      unauthorized:
        url: "${micronaut.server.context-path:}/ui/login/unauthorized"
      login-failure: "${micronaut.server.context-path:}/ui/login/failed"
      logout:  "${micronaut.server.context-path:}/ui"
    intercept-url-map:
      - pattern: "${micronaut.server.context-path:}/ui/**"
        access: "isAnonymous()"
      - pattern: "${micronaut.server.context-path:}/static/**"
        access: "isAnonymous()"
      - pattern: "${micronaut.server.context-path:}/swagger/**"
        access: "isAnonymous()"
    oauth2:
      login-uri: "${micronaut.server.context-path:}/oauth/login{/provider}"
      callback-uri: "${micronaut.server.context-path:}/oauth/callback{/provider}"
  caches:
    kafka-wrapper:
      record-stats: true
      expire-after-write: 0s

jackson:
  serialization:
    writeDatesAsTimestamps: false

endpoints:
  all:
    port: 28081
    enabled: true
    sensitive: false
  health:
    details-visible: ANONYMOUS
  loggers:
    write-sensitive: false

akhq:
  server:
    access-log:
      enabled: true
      name: org.akhq.log.access
      format: "[Date: {}] [Duration: {} ms] [Url: {} {}] [Status: {}] [Ip: {}] [User: {}]"
      filters:
        - "((?!/health).)*"

  clients-defaults:
    consumer:
      properties:
        max.poll.records: 50
        isolation.level: read_committed
        # group.id: Akhq
        enable.auto.commit: "false"
        default.api.timeout.ms: 15000

  pagination:
    page-size: 25
    threads: 16

  avro-serializer:
    json.serialization.inclusions:
      - NON_NULL

  topic:
    replication: 1
    retention: 86400000
    partition: 1
    internal-regexps:
      - "^_.*$"
      - "^.*_schemas$"
      - "^.*connect-config$"
      - "^.*connect-offsets$1"
      - "^.*connect-status$"
    stream-regexps:
      - "^.*-changelog$"
      - "^.*-repartition$"
      - "^.*-rekey$"

  topic-data:
    size: 50
    poll-timeout: 1000
    kafka-max-message-length: 1000000

  security:
    default-group: admin
    roles:
      reader:
        - resources: [ "TOPIC", "TOPIC_DATA", "CONSUMER_GROUP", "CONNECT_CLUSTER", "CONNECTOR", "SCHEMA", "NODE", "ACL", "KSQLDB" ]
          actions: [ "READ" ]
      topic-admin:
        - resources: [ "TOPIC", "TOPIC_DATA" ]
          actions: [ "READ", "CREATE", "UPDATE", "DELETE", "READ_CONFIG", "ALTER_CONFIG" ]
      topic-data-admin:
        - resources: [ "TOPIC", "TOPIC_DATA" ]
          actions: [ "READ", "CREATE", "DELETE" ]
      consumer-group-admin:
        - resources: [ "CONSUMER_GROUP" ]
          actions: [ "READ", "UPDATE_OFFSET", "DELETE_OFFSET" ]
      connect-cluster-reader:
        - resources: [ "CONNECT_CLUSTER" ]
          actions: [ "READ" ]
      connector-admin:
        - resources: [ "CONNECTOR" ]
          actions: [ "READ", "CREATE", "DELETE", "UPDATE_STATE" ]
      schema-admin:
        - resources: [ "SCHEMA" ]
          actions: [ "READ", "CREATE", "UPDATE", "DELETE", "DELETE_VERSION" ]
      node-admin:
        - resources: [ "NODE" ]
          actions: [ "READ_CONFIG", "ALTER_CONFIG" ]
      acl-reader:
        - resources: [ "ACL" ]
          actions: [ "READ" ]
      ksqldb-admin:
        - resources: [ "READ", "KSQLDB" ]
          actions: [ "EXECUTE" ]
    groups:
      reader:
        - role: reader
          # patterns: [ ".*" ]
          # clusters: [ ".*" ]
      admin:
        - role: topic-admin
        - role: topic-data-admin
        - role: consumer-group-admin
        - role: connect-cluster-reader
        - role: connector-admin
        - role: schema-admin
        - role: node-admin
        - role: acl-reader
        - role: ksqldb-admin

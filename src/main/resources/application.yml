micronaut:
  application:
    name: akhq
  io:
    watch:
      paths: src/main
      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true
  server:
    thread-selection: AUTO
    max-request-size: 10MB
    read-idle-timeout: 10m
    write-idle-timeout: 10m
    idle-timeout: 10m
    netty:
      max-chunk-size: 10MB
  router:
    static-resources:
      react:
        paths: classpath:ui
        mapping: "/ui/**"
      static:
        paths: classpath:static
        mapping: "/static/**"
      swagger:
        paths: classpath:META-INF/swagger
        mapping: "/swagger/**"
  security:
    enabled: false
    authentication: cookie
    endpoints:
      login:
        path: "/login"
      logout:
        path: "/logout"
        get-allowed: true
    token:
      jwt:
        enabled: true
        cookie:
          enabled: true
          cookie-same-site: strict
        signatures:
          secret:
            generator:
              secret: "pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!pleasechangeme!"

    redirect:
      login-success: "${micronaut.server.context-path:}/ui"
      forbidden:
        url: "${micronaut.server.context-path:}/ui/login/forbidden"
      unauthorized:
        url: "${micronaut.server.context-path:}/ui/login/unauthorized"
      login-failure: "${micronaut.server.context-path:}/ui/login/failed"
      logout:  "${micronaut.server.context-path:}/ui"
    intercept-url-map:
      - pattern: "${micronaut.server.context-path:}/ui/**"
        access: "isAnonymous()"
      - pattern: "${micronaut.server.context-path:}/static/**"
        access: "isAnonymous()"
      - pattern: "${micronaut.server.context-path:}/swagger/**"
        access: "isAnonymous()"
    oauth2:
      login-uri: "${micronaut.server.context-path:}/oauth/login{/provider}"
      callback-uri: "${micronaut.server.context-path:}/oauth/callback{/provider}"
  caches:
    kafka-wrapper:
      record-stats: true
      expire-after-write: 0s

jackson:
  serialization:
    writeDatesAsTimestamps: false

endpoints:
  all:
    port: 28081
    enabled: true
    sensitive: false
  health:
    details-visible: ANONYMOUS
  loggers:
    write-sensitive: false

akhq:
  server:
    access-log:
      enabled: true
      name: org.akhq.log.access
      format: "[Date: {}] [Duration: {} ms] [Url: {} {}] [Status: {}] [Ip: {}] [User: {}]"
      filters:
        - "((?!/health).)*"

  clients-defaults:
    consumer:
      properties:
        max.poll.records: 50
        isolation.level: read_committed
        # group.id: Akhq
        enable.auto.commit: "false"
        default.api.timeout.ms: 15000

  pagination:
    page-size: 25
    threads: 16

  avro-serializer:
    json.serialization.inclusions:
      - NON_NULL

  topic:
    replication: 1
    retention: 86400000
    partition: 1
    internal-regexps:
      - "^_.*$"
      - "^.*_schemas$"
      - "^.*connect-config$"
      - "^.*connect-offsets$1"
      - "^.*connect-status$"
    stream-regexps:
      - "^.*-changelog$"
      - "^.*-repartition$"
      - "^.*-rekey$"

  topic-data:
    size: 50
    poll-timeout: 1000

  security:
    default-group: admin
    groups:
      admin:
        name: admin
        roles:
        - topic/read
        - topic/insert
        - topic/delete
        - topic/config/update
        - node/read
        - node/config/update
        - topic/data/read
        - topic/data/insert
        - topic/data/delete
        - group/read
        - group/delete
        - group/offsets/update
        - registry/read
        - registry/insert
        - registry/update
        - registry/delete
        - registry/version/delete
        - acls/read
        - connect/read
        - connect/insert
        - connect/update
        - connect/delete
        - connect/state/update
      reader:
        name: reader
        roles:
        - topic/read
        - node/read
        - topic/data/read
        - group/read
        - registry/read
        - acls/read
        - connect/read
      no-roles:
        name: no-roles
        roles: []

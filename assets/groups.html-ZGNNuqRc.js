import{_ as t,o as s,c as e,e as n}from"./app-wh_y01Fx.js";const a={},d=n(`<h1 id="groups" tabindex="-1"><a class="header-anchor" href="#groups" aria-hidden="true">#</a> Groups</h1><p>Groups allow you to limit user</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>With PR #1472 AKHQ introduced a new, better group management system in 0.25.0. It&#39;s a breaking change, so you need to rewrite your ACLS</p></div><p>Define groups with specific roles for your users</p><ul><li><p><code>akhq.security.default-group</code>: Default group for all the user even unlogged user</p></li><li><p><code>akhq.security.groups</code>: Groups map definition</p><ul><li><code>key:</code> a uniq key used as name if not specified <ul><li>A list of role/patterns/clusters association <ul><li><code>role</code>: name of an existing role</li><li><code>patterns</code>: list of regular expression that resources from the given role must match at least once get access</li><li><code>clusters</code>: list of regular expression that cluster must match at least once to get access</li></ul></li></ul></li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Please also set the <code>micronaut.security.token.jwt.signatures.secret.generator.secret</code> if you set a group. If the secret is not set, the API will not enforce the group role, and the restriction is in the UI only.</p></div><p>3 defaults group are available :</p><ul><li><code>admin</code> with all right and no patterns/clusters restrictions</li><li><code>reader</code> with only read access on all AKHQ and no patterns/clusters restrictions</li><li><code>no-roles</code> without any roles, that force user to login</li></ul><p>Here is an example of a <code>reader</code> group definition based on the default reader role with access on all the resources prefixed with <code>pub</code> and located the on <code>public</code> cluster</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>    <span class="token key atrule">groups</span><span class="token punctuation">:</span>
      <span class="token key atrule">reader</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> reader
          <span class="token key atrule">patterns</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;pub.*&quot;</span> <span class="token punctuation">]</span>
          <span class="token key atrule">clusters</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;public&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="roles" tabindex="-1"><a class="header-anchor" href="#roles" aria-hidden="true">#</a> Roles</h2><p>Roles are based on Resource and Action association. A role can target one or several Resource and allow one or several Action. The resources and actions list + possible associations between them are detailed in the table below. You can still associate a resource with a non-supported action from the table. It will just be ignored</p><div style="text-align:center;"><table><thead><tr><th></th><th>TOPIC</th><th>TOPIC_DATA</th><th>CONSUMER_GROUP</th><th>CONNECT_CLUSTER</th><th>CONNECTOR</th><th>SCHEMA</th><th>NODE</th><th>ACL</th><th>KSQLDB</th></tr></thead><tbody><tr><td>READ</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><td>CREATE</td><td>X</td><td>X</td><td></td><td></td><td>X</td><td>X</td><td></td><td></td><td></td></tr><tr><td>UPDATE</td><td>X</td><td>X</td><td></td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr><tr><td>DELETE</td><td>X</td><td>X</td><td>X</td><td></td><td>X</td><td>X</td><td></td><td></td><td></td></tr><tr><td>UPDATE_OFFSET</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DELETE_OFFSET</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>READ_CONFIG</td><td>X</td><td></td><td></td><td></td><td></td><td></td><td>X</td><td></td><td></td></tr><tr><td>ALTER_CONFIG</td><td>X</td><td></td><td></td><td></td><td></td><td></td><td>X</td><td></td><td></td></tr><tr><td>DELETE_VERSION</td><td></td><td></td><td></td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr><tr><td>UPDATE_STATE</td><td></td><td></td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td></tr><tr><td>EXECUTE</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>X</td></tr></tbody></table></div><p>A default roles list is predefined in <code>akhq.security.roles</code> but you can override it. A role contains:</p><ul><li><code>key:</code> a uniq key used as name <ul><li>A list of resources/actions associations <ul><li><code>resources:</code> List of resources (ex: <code>[ &quot;TOPIC&quot;, &quot;TOPIC_DATA&quot;]</code>)</li><li><code>actions:</code> Actions allowed on the previous resources (ex: <code>[ &quot;READ&quot;, &quot;CREATE&quot;]</code>)</li></ul></li></ul></li></ul><p>The default configuration provides a topic-admin role defined as follows:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">topic-admin</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;TOPIC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TOPIC_DATA&quot;</span> <span class="token punctuation">]</span>
    <span class="token key atrule">actions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;READ&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">-</span> <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;TOPIC&quot;</span> <span class="token punctuation">]</span>
    <span class="token key atrule">actions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;READ_CONFIG&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ALTER_CONFIG&quot;</span> <span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[d];function i(l,c){return s(),e("div",null,o)}const u=t(a,[["render",i],["__file","groups.html.vue"]]);export{u as default};

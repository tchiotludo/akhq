import{_ as t,c as r,b as i,d as a,e as n,a as o,f as l,r as d,o as c}from"./app-DR_w82Kd.js";const u={};function p(m,e){const s=d("RouteLink");return c(),r("div",null,[e[9]||(e[9]=i(`<h1 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h1><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>Server</span></a></h2><ul><li><code>micronaut.server.context-path</code>: if behind a reverse proxy, path to akhq without trailing slash (optional). Example: akhq is behind a reverse proxy with url <a href="http://my-server/akhq" target="_blank" rel="noopener noreferrer">http://my-server/akhq</a>, set <code>context-path: &quot;/akhq&quot;</code>. Not needed if you&#39;re behind a reverse proxy with subdomain <a href="http://akhq.my-server/" target="_blank" rel="noopener noreferrer">http://akhq.my-server/</a></li></ul><h2 id="kafka-admin-producer-consumer-default-properties" tabindex="-1"><a class="header-anchor" href="#kafka-admin-producer-consumer-default-properties"><span>Kafka admin / producer / consumer default properties</span></a></h2><ul><li><code>akhq.clients-defaults.{{admin|producer|consumer}}.properties</code>: default configuration for admin producer or consumer. All properties from <a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener noreferrer">Kafka documentation</a> is available.</li></ul><h2 id="micronaut-configuration" tabindex="-1"><a class="header-anchor" href="#micronaut-configuration"><span>Micronaut configuration</span></a></h2><blockquote><p>Since AKHQ is based on <a href="https://micronaut.io/" target="_blank" rel="noopener noreferrer">Micronaut</a>, you can customize configurations (server port, ssl, ...) with <a href="https://docs.micronaut.io/snapshot/guide/configurationreference.html#io.micronaut.http.server.HttpServerConfiguration" target="_blank" rel="noopener noreferrer">Micronaut configuration</a>. More information can be found on <a href="https://docs.micronaut.io/snapshot/guide/index.html#config" target="_blank" rel="noopener noreferrer">Micronaut documentation</a></p></blockquote><h3 id="activating-ssl" tabindex="-1"><a class="header-anchor" href="#activating-ssl"><span>Activating SSL</span></a></h3><p>When using HTTPS for communication, Micronaut will need to get the certificate within Netty. This uses classes of the java.base package which are no longer activated inside the JDK we use. The configuration at the bottom needs to be extended by this environment variable:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">JDK_JAVA_OPTIONS: --add-exports\\=java.base/sun.security.x509\\=ALL-UNNAMED</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">micronaut</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">ssl</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">build-self-signed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-logging" tabindex="-1"><a class="header-anchor" href="#json-logging"><span>JSON Logging</span></a></h2><p>In order to configure AKHQ to output log in JSON format, a logback configuration needs to be provided, e.g. <code>logback.xml</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;configuration&gt;</span>
<span class="line">  &lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span>
<span class="line">    &lt;encoder class=&quot;ch.qos.logback.classic.encoder.JsonEncoder&quot;&gt;</span>
<span class="line">    &lt;/encoder&gt;</span>
<span class="line">  &lt;/appender&gt;</span>
<span class="line"></span>
<span class="line">  &lt;root level=&quot;debug&quot;&gt;</span>
<span class="line">    &lt;appender-ref ref=&quot;stdout&quot;/&gt;</span>
<span class="line">  &lt;/root&gt;</span>
<span class="line">&lt;/configuration&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),a("p",null,[e[1]||(e[1]=n("This file then needs to be mounted to ")),e[2]||(e[2]=a("code",null,"/app/logback.xml",-1)),e[3]||(e[3]=n(" and referenced in ")),e[4]||(e[4]=a("code",null,"JAVA_OPTS",-1)),e[5]||(e[5]=n(" via ")),e[6]||(e[6]=a("code",null,"-Dlogback.configurationFile=/app/logback.xml",-1)),e[7]||(e[7]=n(" (see ")),o(s,{to:"/docs/configuration/docker.html"},{default:l(()=>e[0]||(e[0]=[n("docker")])),_:1}),e[8]||(e[8]=n(" for more information)."))])])}const g=t(u,[["render",p],["__file","others.html.vue"]]),v=JSON.parse('{"path":"/docs/configuration/others.html","title":"Others","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Server","slug":"server","link":"#server","children":[]},{"level":2,"title":"Kafka admin / producer / consumer default properties","slug":"kafka-admin-producer-consumer-default-properties","link":"#kafka-admin-producer-consumer-default-properties","children":[]},{"level":2,"title":"Micronaut configuration","slug":"micronaut-configuration","link":"#micronaut-configuration","children":[{"level":3,"title":"Activating SSL","slug":"activating-ssl","link":"#activating-ssl","children":[]}]},{"level":2,"title":"JSON Logging","slug":"json-logging","link":"#json-logging","children":[]}],"git":{"updatedTime":1737760172000,"contributors":[{"name":"Ludovic DEHON","username":"Ludovic DEHON","email":"tchiot.ludo@gmail.com","commits":1,"url":"https://github.com/Ludovic DEHON"}]},"filePathRelative":"docs/configuration/others.md"}');export{g as comp,v as data};

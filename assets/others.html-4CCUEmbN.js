import{_ as s,r as o,o as i,c as l,b as e,d as n,a as t,w as c,e as d}from"./app-49-IQ9P4.js";const u={},h=e("h1",{id:"others",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#others","aria-hidden":"true"},"#"),n(" Others")],-1),p=e("h2",{id:"server",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#server","aria-hidden":"true"},"#"),n(" Server")],-1),m=e("code",null,"micronaut.server.context-path",-1),g={href:"http://my-server/akhq",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,'context-path: "/akhq"',-1),f={href:"http://akhq.my-server/",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"kafka-admin-producer-consumer-default-properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kafka-admin-producer-consumer-default-properties","aria-hidden":"true"},"#"),n(" Kafka admin / producer / consumer default properties")],-1),_=e("code",null,"akhq.clients-defaults.{{admin|producer|consumer}}.properties",-1),k={href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"micronaut-configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#micronaut-configuration","aria-hidden":"true"},"#"),n(" Micronaut configuration")],-1),q={href:"https://micronaut.io/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.micronaut.io/snapshot/guide/configurationreference.html#io.micronaut.http.server.HttpServerConfiguration",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.micronaut.io/snapshot/guide/index.html#config",target:"_blank",rel:"noopener noreferrer"},N=d(`<h3 id="activating-ssl" tabindex="-1"><a class="header-anchor" href="#activating-ssl" aria-hidden="true">#</a> Activating SSL</h3><p>When using HTTPS for communication, Micronaut will need to get the certificate within Netty. This uses classes of the java.base package which are no longer activated inside the JDK we use. The configuration at the bottom needs to be extended by this environment variable:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JDK_JAVA_OPTIONS: --add-exports\\=java.base/sun.security.x509\\=ALL-UNNAMED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">micronaut</span><span class="token punctuation">:</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">ssl</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">build-self-signed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json-logging" tabindex="-1"><a class="header-anchor" href="#json-logging" aria-hidden="true">#</a> JSON Logging</h2><p>In order to configure AKHQ to output log in JSON format, a logback configuration needs to be provided, e.g. <code>logback.xml</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;configuration&gt;
  &lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
    &lt;encoder class=&quot;ch.qos.logback.classic.encoder.JsonEncoder&quot;&gt;
    &lt;/encoder&gt;
  &lt;/appender&gt;

  &lt;root level=&quot;debug&quot;&gt;
    &lt;appender-ref ref=&quot;stdout&quot;/&gt;
  &lt;/root&gt;
&lt;/configuration&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),S=e("code",null,"/app/logback.xml",-1),w=e("code",null,"JAVA_OPTS",-1),L=e("code",null,"-Dlogback.configurationFile=/app/logback.xml",-1);function T(J,M){const a=o("ExternalLinkIcon"),r=o("RouterLink");return i(),l("div",null,[h,p,e("ul",null,[e("li",null,[m,n(": if behind a reverse proxy, path to akhq without trailing slash (optional). Example: akhq is behind a reverse proxy with url "),e("a",g,[n("http://my-server/akhq"),t(a)]),n(", set "),v,n(". Not needed if you're behind a reverse proxy with subdomain "),e("a",f,[n("http://akhq.my-server/"),t(a)])])]),b,e("ul",null,[e("li",null,[_,n(": default configuration for admin producer or consumer. All properties from "),e("a",k,[n("Kafka documentation"),t(a)]),n(" is available.")])]),x,e("blockquote",null,[e("p",null,[n("Since AKHQ is based on "),e("a",q,[n("Micronaut"),t(a)]),n(", you can customize configurations (server port, ssl, ...) with "),e("a",y,[n("Micronaut configuration"),t(a)]),n(". More information can be found on "),e("a",A,[n("Micronaut documentation"),t(a)])])]),N,e("p",null,[n("This file then needs to be mounted to "),S,n(" and referenced in "),w,n(" via "),L,n(" (see "),t(r,{to:"/docs/configuration/docker.html"},{default:c(()=>[n("docker")]),_:1}),n(" for more information).")])])}const K=s(u,[["render",T],["__file","others.html.vue"]]);export{K as default};

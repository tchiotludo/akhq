import{_ as a,o as s,c as n,e}from"./app-STOpbFJX.js";const t={},o=e(`<h1 id="header-configuration-reverse-proxy" tabindex="-1"><a class="header-anchor" href="#header-configuration-reverse-proxy" aria-hidden="true">#</a> Header configuration (reverse proxy)</h1><p>To enable Header authentication in the application, you&#39;ll have to configure the header that will resolve users &amp; groups:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">akhq</span><span class="token punctuation">:</span>
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token comment"># Header configuration (reverse proxy)</span>
    <span class="token key atrule">header-auth</span><span class="token punctuation">:</span>
      <span class="token key atrule">user-header</span><span class="token punctuation">:</span> x<span class="token punctuation">-</span>akhq<span class="token punctuation">-</span>user <span class="token comment"># mandatory (the header name that will contain username)</span>
      <span class="token key atrule">groups-header</span><span class="token punctuation">:</span> x<span class="token punctuation">-</span>akhq<span class="token punctuation">-</span>group <span class="token comment"># optional (the header name that will contain groups separated by groups-header-separator)</span>
      <span class="token key atrule">groups-header-separator</span><span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment"># optional (separator, defaults to &#39;,&#39;)</span>
      <span class="token key atrule">ip-patterns</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>0.0.0.0<span class="token punctuation">]</span> <span class="token comment"># optional (Java regular expressions for matching trusted IP addresses, &#39;0.0.0.0&#39; matches all addresses)</span>
      <span class="token key atrule">default-group</span><span class="token punctuation">:</span> topic<span class="token punctuation">-</span>reader
      <span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token comment"># optional</span>
        <span class="token comment"># the name of the user group read from header</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>group
          <span class="token key atrule">groups</span><span class="token punctuation">:</span>
            <span class="token comment"># the corresponding akhq groups (eg. topic-reader/writer or akhq default groups like admin/reader/no-role)</span>
            <span class="token punctuation">-</span> admin
      <span class="token key atrule">users</span><span class="token punctuation">:</span> <span class="token comment"># optional</span>
        <span class="token punctuation">-</span> <span class="token key atrule">username</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>user <span class="token comment"># username matching the \`user-header\` value</span>
          <span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token comment"># list of groups / additional groups</span>
            <span class="token punctuation">-</span> topic<span class="token punctuation">-</span>writer
        <span class="token punctuation">-</span> <span class="token key atrule">username</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>admin
          <span class="token key atrule">groups</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>user-header</code> is mandatory in order to map the user with <code>users</code> list or to display the user on the ui if no <code>users</code> is provided.</li><li><code>groups-header</code> is optional and can be used in order to inject a list of groups for all the users. This list will be merged with <code>groups</code> for the current users.</li><li><code>groups-header-separator</code> is optional and can be used to customize group separator used when parsing <code>groups-header</code> header, defaults to <code>,</code>.</li><li><code>ip-patterns</code> limits the IP addresses that header authentication will accept, given as a list of Java regular expressions, omit or set to <code>[0.0.0.0]</code> to allow all addresses</li><li><code>default-group</code> default AKHQ group, used when no groups were read from <code>groups-header</code></li><li><code>groups</code> maps external group names read from headers to AKHQ groups.</li><li><code>users</code> assigns additional AKHQ groups to users.</li></ul>`,4),p=[o];function r(i,l){return s(),n("div",null,p)}const u=a(t,[["render",r],["__file","header.html.vue"]]);export{u as default};
